import 'dart:math';

import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

class NotificationServices {
  FirebaseMessaging messaging = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();


  void requestNotificationPermission() async {
    NotificationSettings settings = await messaging.requestPermission(
        alert: true,
        announcement: true,
        badge: true,
        carPlay: true,
        criticalAlert: true,
        provisional: true,
        sound: true);


    if(settings.authorizationStatus==AuthorizationStatus.authorized){
      print("Permission granted");


    }else if (settings.authorizationStatus == AuthorizationStatus.provisional) {
      print("provisional Permission granted");



    }else{
      print("Permission not granted");


    }
  }
  void initlocalNotification(BuildContext context,RemoteMessage message)async{

    var androinitilized = AndroidInitializationSettings("@drawable/appicon.png");
    var iosinitilized = DarwinInitializationSettings();
    var initilizationSetting = InitializationSettings(
        android: androinitilized,
        iOS: iosinitilized
    );
     await _flutterLocalNotificationsPlugin.initialize(initilizationSetting,onDidReceiveNotificationResponse: (payload){




     });

  }


  void firebaseInit(){
    FirebaseMessaging.onMessage.listen((message) {
      print(message.notification?.body.toString());
      showNotification(message);



    });
  }

  Future<void> showNotification(RemoteMessage message)async{
    
    AndroidNotificationChannel channel = AndroidNotificationChannel(
       Random.secure().nextInt(100000).toString(),

       'High Importance Notification',
      importance: Importance.max
    );
     AndroidNotificationDetails androidNotificationDetails = AndroidNotificationDetails(
         // Random.secure().nextInt(100000).toString(),
         channel.id.toString(),
         channel.name.toString(),
         // 'High Importance Notification'
       channelDescription: "Your Channel Description",
       importance: Importance.high,
       priority: Priority.high,
       ticker: 'ticker'
     );


     DarwinNotificationDetails darwinNotificationDetails = DarwinNotificationDetails(
       presentSound: true,
       presentBadge: true,
       presentAlert: true

     );
     NotificationDetails notificationDetails = NotificationDetails(
       android: androidNotificationDetails,
       iOS: darwinNotificationDetails
     );

    Future.delayed(Duration.zero,(){
      _flutterLocalNotificationsPlugin.show(
          0,
          message.notification?.title.toString(),
          message.notification?.body.toString(),
          notificationDetails


      );


    }



    );

}
  Future<String> getDeviceToken()async{
    String? token = await messaging.getToken();
    return token!;
  }
}




============
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';

import 'firebase_messeging.dart';

Future<void> main()async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  FirebaseMessaging.onBackgroundMessage(_firebaseMessegeBackgroundHandler);
  runApp(const MyApp());
}
@pragma('vm:entry-point')
Future<void> _firebaseMessegeBackgroundHandler(RemoteMessage message)async{
  await Firebase.initializeApp();
  print(message.notification!.title.toString());

}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  NotificationServices notificationServices = NotificationServices();


  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    notificationServices.firebaseInit();
    notificationServices.requestNotificationPermission();
    notificationServices.getDeviceToken().then((value) {
      print(value.toString());

    });
  }


  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child:Column(

        ),
      ),
     // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
-------------
 firebase_messaging: ^14.6.0
  firebase_core: ^2.12.0
  flutter_local_notifications: ^14.0.0+2
--------------


 <meta-data
           android:name="com.google.firebase.messaging.default_notification_channel_id"
           android:value="high_importance_channel" />
           ---------
           
