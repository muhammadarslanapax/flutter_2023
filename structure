lib/view
lib/modal
lib/view_modal
lib/respositiry
lib/res
lib/utils

lib/data
    network/
    BaseApiServices.dart/
    abstract class BaseApiServices {
  Future<dynamic> getApiResponse(String url);
  Future<dynamic> postApiResponse(String url, dynamic data);
}

   NetworkAliServices/
   import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:http/http.dart';

import '../app_exception.dart';
import 'BaseApiServices.dart';

class NetworkApiService extends BaseApiServices {
  @override
  Future getApiResponse(String url) async {
    dynamic responseJson;
    try {
      Response respone =
      await http.get(Uri.parse(url)).timeout(const Duration(seconds: 10));
      responseJson = returnResponse(respone);
    } on SocketException {
      throw FetchDataException('No Internet Connection');
    } catch (e) {
      debugPrint(e.toString());
    }
    return responseJson;
  }

  @override
  Future postApiResponse(String url, dynamic data) async{
    dynamic responseJson;
    try {
      Response respone =
      await post(Uri.parse(url), body: data).timeout(const Duration(seconds: 10));
      responseJson = returnResponse(respone);
    } on SocketException {
      throw FetchDataException('No Internet Connection');
    } catch (e) {
      debugPrint(e.toString());
    }
    return responseJson;
  }

  dynamic returnResponse(http.Response response) {
    switch (response.statusCode) {
      case 200:
        dynamic responseJson = jsonDecode(response.body);
        return responseJson;
      case 400:
        throw BadRequestException(response.body.toString());
      case 404:
        throw UnAuthorizeException(response.body.toString());
      default:
        throw FetchDataException(
            'Error accure the communicate with server ${response.statusCode.toString()}');
    }
  }
}

lib/response/
    api_response.dart/
    import 'package:ecommerce_app/data/response/status.dart';

class ApiResponse<T> {
  Status? status;

  T? data;
  String? message;

  ApiResponse(this.status, this.data, this.message);

  // ApiResponse.loading() : status = Status.LOADING;
  // ApiResponse.completed(ApiResponse apiResponse) : status = Status.COMPLETE;
  // ApiResponse.error() : status = Status.ERROR;

  ApiResponse.loading() : status = Status.LOADING ;

  ApiResponse.completed(this.data) : status = Status.COMPLETE ;

  ApiResponse.error(this.message) : status = Status.ERROR ;

  @override
  String toString() {
    return "Status : $status\n Message: $message \n Data: $data";
  }
}

  status.dart
  enum Status {LOADING,COMPLETE,ERROR}
  
  data/app_exception.dart/
  
  class AppException implements Exception {
  final _messege;
  final _prefix;

  AppException([this._messege, this._prefix]);

  String toString() {
    return "$_prefix$_messege";
  }
}

class FetchDataException extends AppException {
  FetchDataException([String? message])
      : super(message, "Error during communication");
}

class BadRequestException extends AppException {
  BadRequestException([String? message])
      : super(message, "Invalid request");
}

class UnAuthorizeException extends AppException {
  UnAuthorizeException([String? message])
      : super(message, "unauthorized request");
}



======================================================================================================================


respository/
   auth_respository.darr/
   import '../data/network/BaseApiServices.dart';
import '../data/network/NetworkApiServices.dart';
import '../res/app_url.dart';

class AuthRepository {
  BaseApiServices _apiServices = NetworkApiService();

  Future<dynamic> loginApi(dynamic data) async {
    try {
      dynamic response = await _apiServices.getApiResponse(AppUrl.loginEndPint);
      return response;
    } catch (e) {
      throw e;
    }
  }

  Future<dynamic> signUpApi(dynamic data) async {
    try {
      dynamic response =
          await _apiServices.postApiResponse(AppUrl.registerApiEndPoint, data);
      return response;
    } catch (e) {
      throw e;
    }
  }
}


======================================================================================================================

res/constrants/
constants.dart/
const String SUCCESS_MESSAGE = "You will be contacted by us very soon.";
style.dart/
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

import '../color.dart';


class Styles{

  OutlineInputBorder texFormStyle() {
    return OutlineInputBorder(borderRadius: BorderRadius.circular(8),
      borderSide: BorderSide.none);}

  TextStyle txtFormTitleStyle({required Color color}){
    return GoogleFonts.poppins(fontSize: 16,
        color: color,fontWeight: FontWeight.w500);
  }

  BoxDecoration btnBorderStyle(){
    return BoxDecoration(
        color: AppColors.primaryTextColor,
        borderRadius: BorderRadius.circular(8));
  }

  OutlineInputBorder errorFormBorder(){
    return OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: AppColors.redColor,width: 1)
    );
  }

  TextStyle errorFormText(){
    return TextStyle(fontSize: 12,color: AppColors.redColor);
  }

  BoxDecoration boxBorderStyle(color){
    return BoxDecoration(
        color: color,
        borderRadius: BorderRadius.circular(20));
  }
}


-----
res/app_theme.dart/
import 'package:ecommerce_app/res/color.dart';
import 'package:flutter/material.dart';

class CommonMethod {

  ThemeData themedata = ThemeData(
      appBarTheme:  AppBarTheme(
        color: AppColors.tail,
      ),
      textButtonTheme: TextButtonThemeData(
        style: TextButton.styleFrom(
          foregroundColor: AppColors.tail,
        ),
      ),
      scaffoldBackgroundColor: Colors.grey[200],
      textTheme:  const TextTheme(
        bodyLarge: TextStyle(),
        bodyMedium: TextStyle(),
      ).apply(
        bodyColor: AppColors.introTextColor,
      ));
}


-------
res/app_url.dart


class AppUrl {


  static var baseUrl = 'https://reqres.in' ;

  //static var moviesBaseUrl = 'https://dea91516-1da3-444b-ad94-c6d0c4dfab81.mock.pstmn.io/' ;

  static var loginEndPint =  baseUrl + '/api/login' ;

  static var registerApiEndPoint =  baseUrl + '/api/register' ;

 // static var moviesListEndPoint =  moviesBaseUrl + 'movies_list' ;


}

------
res/colors.dart/
import 'package:flutter/material.dart';

class AppColors {
  // static Color container = const Color.fromARGB(255, 37, 76, 95);
  // static Color background = Colors.black;
   static Color redColor = Colors.red;
   static Color blackColor = Colors.black;
   static Color tail = Colors.teal;
   static Color gridentColor = const Color(0xFFFFC0B2);
   static Color introTextColor = const Color(0xFFDB9080);
   static Color splashC0lor =   Colors.black;
   static Color locationBoxColor =   const Color(0xFFFCD6CE);
   static Color locationBoxTextColor =   const Color(0xFF292D32);
   static Color textFieldBgColor =  const Color(0xFCFAEBEB);



   // use these colors
   static Color whiteColor = Colors.white;
   static Color backgroundColor = Colors.white;
   static Color primaryTextColor = const Color(0xFFDB9080);
   static Color secondaryTextColor = const Color(0xFF666666);
   static Color smallTextColor = const Color(0xFF292D32);
   static Color dimTextColor = const Color(0xFF0F0F0F);
   static Color dim2TextColor = const Color(0xFF9E9E9E);
   static Color dim3Color = const Color(0xF5F5F5FF);
   static Color bottomnav_bg = const Color(0xFFFFF4F1);
   static Color indicator_color = const Color(0xFFDB9080);



   // bottom nav colors
    //background colors
   static Color bottom_nav_bg_color = const Color(0xFFFFF4F1);
   static Color icon_select_color = const Color(0xFFDB9080);
   static Color icon_color = const Color(0xFF292D32);


   //text color main screen
   static Color text_color = const Color(0xFF292D32);
   static Color text_color_light = const Color(0xFF9E9E9E);
   static Color notification_icon_bg = const Color(0xFFFFF4F1);
   static Color hint_color = const Color(0xFFE47058);
   static Color star_color = const Color(0xFFFDBE61);

   static Color box_color = const Color(0xFFFCD6CE);
   static Color text2_color = const Color(0xFF9D9D9D);
   static Color text3_color = const Color(0xFFF1F1F1);
   static Color box_colorlight = const Color(0xFFFFF0ED);




}

==================================================================================


utils/general_utils.dart/
  import 'package:another_flushbar/flushbar.dart';
import 'package:another_flushbar/flushbar_route.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';

import '../res/color.dart';

class Utils{

  static toastMessage(String message){
    Fluttertoast.showToast(msg: message);

  }

  static flushMessage(String message,BuildContext context){
    showFlushbar(context: context, flushbar: Flushbar(
      message: message,
      backgroundColor: AppColors.redColor,
      messageColor: AppColors.blackColor,
      duration: const Duration(seconds: 2),
      icon:  Icon(Icons.error,size: 20,color:AppColors.whiteColor,),

    )..show(context));

  }

  static snackbarMessage(String message,BuildContext context){
    return ScaffoldMessenger.of(context).showSnackBar(

        SnackBar(
            backgroundColor: AppColors.redColor,
            content: Text(message,))
    );
  }

}

-------
utils/routes/routes_handler/
import 'package:ecommerce_app/utils/routes/routes_name.dart';
import 'package:ecommerce_app/view/home/account/account_page.dart';
import 'package:ecommerce_app/view/home/account/favourite_page.dart';
import 'package:ecommerce_app/view/home/account/profile_page.dart';
import 'package:ecommerce_app/view/home/category/booking_page.dart';
import 'package:ecommerce_app/view/home/category/oppoointment.dart';
import 'package:ecommerce_app/view/home/category/reviews.dart';
import 'package:ecommerce_app/view/home/home_page.dart';
import 'package:ecommerce_app/view/introduction_page.dart';
import 'package:ecommerce_app/view/location/location_page.dart';
import 'package:ecommerce_app/view/logInPage.dart';
import 'package:ecommerce_app/view/payment/checkoutPage.dart';
import 'package:ecommerce_app/view/payment/paymentPage.dart';
import 'package:ecommerce_app/view/signUpPage.dart';
import 'package:ecommerce_app/view/splash.dart';
import 'package:ecommerce_app/view/varificationPage.dart';
import 'package:flutter/material.dart';

import '../../view/BuisnessStartup/shopStartupPage.dart';

import '../../view/home/account/card_page.dart';
import '../../view/agreementPage.dart';
import '../../view/home/account/page_noteFound.dart';
import '../../view/home/account/term_and_condition.dart';
import '../../view/home/category/category_page.dart';
import '../../view/home/home/notification.dart';
import '../../view/home/account/settings.dart';
import '../../view/payment/slotBookedPage.dart';

// Define Routes

// Route Names

// Control our page route flow
Route<dynamic> generateRoutes(RouteSettings settings) {
  switch (settings.name) {
    case RoutesName.homePage:
      return MaterialPageRoute(builder: (context) => const HomePage());
    case RoutesName.splashPage:
      return MaterialPageRoute(builder: (context) => const Splash());
    case RoutesName.introductionPage:
      return MaterialPageRoute(builder: (context) => const Introduction());

    case RoutesName.locationPage:
      return MaterialPageRoute(builder: (context) => const LocationPage());
    case RoutesName.sigUpPage:
      return MaterialPageRoute(builder: (context) =>  SignUpPage());
    case RoutesName.logInPage:
      return MaterialPageRoute(builder: (context) =>  LogInPage());
    case RoutesName.verificationPage:
      return MaterialPageRoute(builder: (context) => const VerificationPage());
    case RoutesName.paymentPage:
      return MaterialPageRoute(builder: (context) => const PaymentPage());
    case RoutesName.checkoutPage:
      return MaterialPageRoute(builder: (context) => const CheckoutPage());
    case RoutesName.slotBookingPage:
      return MaterialPageRoute(builder: (context) => const SlotBookingPage());

    case RoutesName.notificationPage:
      return MaterialPageRoute(builder: (context) => const NotificationPage());

    case RoutesName.categoryPage:
      return MaterialPageRoute(builder: (context) => const Category());
    case RoutesName.oppointmentPage:
      return MaterialPageRoute(builder: (context) => const Oppointment());
    case RoutesName.reviewsPage:
      return MaterialPageRoute(builder: (context) => const ReviewsPage());
    case RoutesName.agreementPage:
      return MaterialPageRoute(builder: (context) => const Agreement());
    case RoutesName.bookingPage:
      return MaterialPageRoute(builder: (context) => const BookingPage());
    case RoutesName.termandcondition:
      return MaterialPageRoute(builder: (context) => const Term_and_Conditions());
    case RoutesName.pagenotfound:
      return MaterialPageRoute(builder: (context) => const PAge_NoteFound());
    case RoutesName.settings:
      return MaterialPageRoute(builder: (context) => const Settings());
    case RoutesName.shopstartuppage:
      return MaterialPageRoute(builder: (context) => const ShopStartup());
    case RoutesName.accountPage:
      return MaterialPageRoute(builder: (context) => const Account());
    case RoutesName.profilePage:
      return MaterialPageRoute(builder: (context) => const ProfilePage());
    case RoutesName.favouritePage:
      return MaterialPageRoute(builder: (context) => const FavouritePage());
    case RoutesName.cardPage:
      return MaterialPageRoute(builder: (context) => const CardPage());
    default:
      throw ('This route name does not exit');
  }
}

-----
routes_name.dart

abstract class RoutesName{
  static const String homePage = '/home';
  static const String splashPage = 'splash';
  static const String introductionPage = 'introduction';
  static const String locationPage = 'location';
  static const String sigUpPage = 'signup';
  static const String logInPage = 'login';
  static const String verificationPage = 'verification';
  static const String paymentPage = 'payment';
  static const String checkoutPage = 'checkout';
  static const String slotBookingPage = 'slotBooking';
  static const String notificationPage = 'notification';
  static const String categoryPage = 'category';
  static const String oppointmentPage = 'oppoitment';
  static const String reviewsPage = 'reviews';
  static const String agreementPage = 'agreement';
  static const String bookingPage = 'booking';
  static const String termandcondition = 'termandcondition';
  static const String pagenotfound = 'pagenotfound';
  static const String settings = 'settings';
  static const String shopstartuppage = 'shopstartuppage';
  static const String accountPage = 'account';
  static const String profilePage = 'profile';
  static const String favouritePage = 'Favourite';
  static const String cardPage = 'card';

}

---------
main.dart/
import 'package:ecommerce_app/utils/routes/route_handler.dart' as Routes;
import 'package:ecommerce_app/utils/routes/routes_name.dart';
import 'package:ecommerce_app/view_modal/auth_view_model.dart';
import 'package:ecommerce_app/view_modal/user_view_model.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  // This widget is the root of your application.
  @override

  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthViewModel()),
        ChangeNotifierProvider(create: (_) => UserViewModel())
      ],
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        title: 'Flutter Demo',
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        initialRoute: RoutesName.splashPage,
        onGenerateRoute: Routes.generateRoutes,
      ),
    );
  }
}


--------------------
view_modal/
auth_view_model.dart/


import 'package:ecommerce_app/utils/routes/routes_name.dart';
import 'package:ecommerce_app/view_modal/user_view_model.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';

import 'package:provider/provider.dart';

import '../modal/user_model.dart';
import '../repository/auth_repository.dart';
import '../utils/general_utils.dart';

class AuthViewModel with ChangeNotifier {
  final _myRepo = AuthRepository();

  bool _loading = false ;
  bool get loading => _loading ;

  bool _signUpLoading = false ;
  bool get signUpLoading => _signUpLoading ;


  setLoading(bool value){
    _loading = value;
    notifyListeners();
  }

  setSignUpLoading(bool value){
    _signUpLoading = value;
    notifyListeners();
  }

  Future<void> loginApi(dynamic data , BuildContext context) async {

    setLoading(true);

    _myRepo.loginApi(data).then((value){









      setLoading(false);
      final userPreference = Provider.of<UserViewModel>(context , listen: false);
      userPreference.saveUser(
          UserModel(

              //token: value['token'].toString()
              token: value['page'].toString()
          )
      );



      Utils.flushMessage('Login Successfully', context);
      // Navigator.pushNamed(context, RoutesName.home);
      // Navigator.pushNamed(context, RoutesName.homePage);
      if(kDebugMode){
        print(value.toString());
         Navigator.pushNamed(context, RoutesName.homePage);

      }
    }).onError((error, stackTrace){
      setLoading(false);
      Utils.flushMessage(error.toString(), context);
      if(kDebugMode){
        print(error.toString());
      }

    });
  }


  Future<void> signUpApi(dynamic data , BuildContext context) async {

    setSignUpLoading(true);

    _myRepo.signUpApi(data).then((value){
      setSignUpLoading(false);
      Utils.toastMessage("Registered Successfully please Login");
    //  Utils.flushMessage('SignUp Successfully', context);
      Navigator.pushNamed(context, RoutesName.logInPage);
      if(kDebugMode){
        print(value.toString());

      }
    }).onError((error, stackTrace){
      setSignUpLoading(false);
      Utils.flushMessage(error.toString(), context);
      if(kDebugMode){
        print(error.toString());
      }

    });
  }

}

--------
user_view_modal/

import 'package:flutter/cupertino.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../modal/user_model.dart';

class UserViewModel with ChangeNotifier{

  Future<bool> saveUser(UserModel user)async{

    final SharedPreferences sp = await SharedPreferences.getInstance();
    sp.setString('token', user.token.toString());
    notifyListeners();
    return true ;
  }

  Future<UserModel> getUser()async{

    final SharedPreferences sp = await SharedPreferences.getInstance();
    final String? token = sp.getString('token');

    return UserModel(
        token: token.toString()
    );
  }

  Future<bool> remove()async{

    final SharedPreferences sp = await SharedPreferences.getInstance();
    sp.remove('token');
    return true;

  }
}



--------
view_modal/service
splashService.dart

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import '../../modal/user_model.dart';
import '../../utils/routes/routes_name.dart';
import '../user_view_model.dart';

class SplashServices {


  Future<UserModel> getUserDate() => UserViewModel().getUser();


  void checkAuthentication(BuildContext context)async{

    getUserDate().then((value)async{

      print(value.token.toString());

      if(value.token.toString() == 'null' || value.token.toString() == ''||value.token!.isEmpty){
        await Future.delayed(Duration(seconds: 3));
        Navigator.pushNamed(context, RoutesName.introductionPage);
        print(value.token.toString());
      }else {
        await  Future.delayed(Duration(seconds: 3));
       // Navigator.pushNamed(context, RoutesName.homePage);

        Navigator.pushReplacementNamed(context, '/home');

      }

    }).onError((error, stackTrace){
      if(kDebugMode){
        print(error.toString());
      }
    });

  }



}===============================
